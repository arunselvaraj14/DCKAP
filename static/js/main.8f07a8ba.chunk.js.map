{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["item1","id","v4","name","item2","App","useState","text","setText","title","items","state","setState","className","onSubmit","e","preventDefault","type","value","onChange","target","onClick","prev","todo","onDragEnd","destination","source","index","droppableId","itemCopy","splice","_","map","data","key","provided","snapshot","ref","innerRef","droppableProps","el","draggableId","isDragging","draggableProps","dragHandleProps","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAMMA,EAAQ,CACZC,GAAIC,cACJC,KAAM,uBAEFC,EAAQ,CACZH,GAAIC,cACJC,KAAM,oBA2HOE,MAxHf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,CACjC,KAAQ,CACNG,MAAO,OACPC,MAAO,CAACV,EAAMI,MAHlB,mBAAOO,EAAP,KAAcC,EAAd,KAsDA,OACE,sBAAKC,UAAU,MAAf,UAEE,qBAAKA,UAAU,QAAf,SACE,uBAAMA,UAAU,OAAOC,SApDR,SAACC,GACpBA,EAAEC,kBAmDE,UACE,mDACA,uBAAOH,UAAU,MAAMI,KAAK,OAAOC,MAAOX,EAAMY,SAAU,SAACJ,GAAD,OAAOP,EAAQO,EAAEK,OAAOF,UAAU,uBAC5F,wBAAQL,UAAU,MAAMQ,QA3BhB,WACdT,GAAS,SAAAU,GACP,OAAO,2BACFA,GADL,IAEEC,KAAM,CACJd,MAAO,OACPC,MAAM,CACJ,CACET,GAAIC,cACJC,KAAMI,IAHL,mBAKAe,EAAKC,KAAKb,cAMrBF,EAAQ,KAUF,SAA0C,uCAC3C,sBAAKP,GAAG,MAAR,UACA,qBAAKA,GAAG,UACR,qBAAKA,GAAG,mBAMX,cAAC,IAAD,CAAiBuB,UA7DC,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,OACpC,GAAKD,IAIDA,EAAYE,QAAUD,EAAOC,OAASF,EAAYG,cAAgBF,EAAOE,aAA7E,CAKA,IAAMC,EAAQ,eAAQlB,EAAMe,EAAOE,aAAalB,MAAMgB,EAAOC,QAE7Df,GAAS,SAAAU,GASP,OARAA,EAAI,eAAQA,IAEPI,EAAOE,aAAalB,MAAMoB,OAAOJ,EAAOC,MAAO,GAIpDL,EAAKG,EAAYG,aAAalB,MAAMoB,OAAOL,EAAYE,MAAO,EAAGE,GAE1DP,OAwCP,SACGS,IAAEC,IAAIrB,GAAO,SAACsB,EAAMC,GACnB,OACE,sBAAerB,UAAW,SAA1B,UACE,oBAAIA,UAAU,QAAd,SAAuBoB,EAAKxB,QAC5B,cAAC,IAAD,CAAWmB,YAAaM,EAAxB,SACG,SAACC,EAAUC,GACV,OACE,8CACEC,IAAKF,EAASG,UACVH,EAASI,gBAFf,IAGE1B,UAAW,gBAHb,UAKGoB,EAAKvB,MAAMsB,KAAI,SAACQ,EAAIb,GACnB,OACE,cAAC,IAAD,CAAuBA,MAAOA,EAAOc,YAAaD,EAAGvC,GAArD,SACG,SAACkC,EAAUC,GAEV,OACE,0DACEvB,UAAS,eAAUuB,EAASM,YAAc,YAC1CL,IAAKF,EAASG,UACVH,EAASQ,gBACTR,EAASS,iBAJf,wBAMWJ,EAAGrC,WAVJqC,EAAGvC,OAkBtBkC,EAASU,qBA9BVX,YC9EPY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8f07a8ba.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport _ from \"lodash\";\nimport { v4 } from \"uuid\";\n\nconst item1 = {\n  id: v4(),\n  name: \"Drag and Drop down \"\n}\nconst item2 = {\n  id: v4(),\n  name: \"Drag and Drop up\"\n}\n\nfunction App() {\n  const [text, setText] = useState(\"\")\n  const [state, setState] = useState({\n    \"todo\": {\n      title: \"TASK\",\n      items: [item1,item2]\n    }\n  })\n  const handleSubmit = (e) => {\n    e.preventDefault();\n  }\n  const handleDragEnd = ({ destination, source }) => {\n    if (!destination) {\n      return\n    }\n\n    if (destination.index === source.index && destination.droppableId === source.droppableId) {\n      return\n    }\n\n    // Creating a copy of item before removing it from state\n    const itemCopy = { ...state[source.droppableId].items[source.index] }\n\n    setState(prev => {\n      prev = { ...prev }\n      // Remove from previous items array\n      prev[source.droppableId].items.splice(source.index, 1)\n\n\n      // Adding to new items array location\n      prev[destination.droppableId].items.splice(destination.index, 0, itemCopy)\n\n      return prev\n    })\n  }\n\n  const addItem = () => {\n    setState(prev => {\n      return {\n        ...prev,\n        todo: {\n          title: \"TASK\",\n          items: [\n            {\n              id: v4(),\n              name: text\n            },\n            ...prev.todo.items\n          ]\n        }\n      }\n    })\n\n    setText(\"\")\n  }\n  \n  return (\n    <div className=\"App\">\n     \n      <div className=\"divbg\">\n        <form className=\"form\" onSubmit={handleSubmit}>\n          <label>Enter The Task</label>\n          <input className=\"int\" type=\"text\" value={text} onChange={(e) => setText(e.target.value)} /><br />\n          <button className=\"but\" onClick={addItem}><h1>ADD</h1></button>\n         <div id=\"div\">\n         <div id=\"divid\"></div>\n         <div id=\"divid2\"></div>\n         </div>\n         \n        </form>\n      </div>\n\n      <DragDropContext onDragEnd={handleDragEnd}>\n        {_.map(state, (data, key) => {\n          return (\n            <div key={key} className={\"column\"}>\n              <h3 className=\"title\">{data.title}</h3>\n              <Droppable droppableId={key}>\n                {(provided, snapshot) => {\n                  return (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.droppableProps}\n                      className={\"droppable-col\"}\n                    >\n                      {data.items.map((el, index) => {\n                        return (\n                          <Draggable key={el.id} index={index} draggableId={el.id}>\n                            {(provided, snapshot) => {\n                              \n                              return (\n                                <div\n                                  className={`item ${snapshot.isDragging && \"dragging\"}`}\n                                  ref={provided.innerRef}\n                                  {...provided.draggableProps}\n                                  {...provided.dragHandleProps}\n                                >\n                                  &#9830; {el.name}\n                                  \n                                </div>\n                              )\n                            }}\n                          </Draggable>\n                        )\n                      })}\n                      {provided.placeholder}\n                    </div>\n                  )\n                }}\n              </Droppable>\n            </div>\n          )\n        })}\n      </DragDropContext>\n\n    </div>\n\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}